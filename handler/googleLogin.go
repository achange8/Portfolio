package handler

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	db "github.com/achange8/Portfolio/DB"
	"github.com/achange8/Portfolio/module"
	"github.com/labstack/echo"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
)

type AutoGenerated struct {
	ID            string `json:"id"`
	Email         string `json:"email"`
	VerifiedEmail bool   `json:"verified_email"`
	Name          string `json:"name"`
	GivenName     string `json:"given_name"`
	FamilyName    string `json:"family_name"`
	Picture       string `json:"picture"`
	Locale        string `json:"locale"`
}

var googleOauthConfig = oauth2.Config{
	RedirectURL:  "http://localhost:8082/auth/google/callback",
	ClientID:     "295221415874-mmh9djapdgnsl7i8neke5kec0984a9fm.apps.googleusercontent.com",
	ClientSecret: "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",
	Scopes: []string{"https://www.googleapis.com/auth/userinfo.email",
		"https://www.googleapis.com/auth/userinfo.profile"},
	Endpoint: google.Endpoint,
}

func GoogleLogin(c echo.Context) error {
	state := oauthCookie(c)
	url := googleOauthConfig.AuthCodeURL(state)
	c.Redirect(http.StatusTemporaryRedirect, url)

	return nil
}

func oauthCookie(c echo.Context) string {
	b := make([]byte, 16)
	rand.Read(b)
	state := base64.URLEncoding.EncodeToString(b)
	cookie := new(http.Cookie)
	cookie.Name = "oauthcookie"
	cookie.Value = state
	cookie.Expires = time.Now().Add(24 * time.Hour)
	c.SetCookie(cookie)
	return state
}

//login google acount, get user info, give jwt cookie
//not in db.users google user
func GoogleCallBack(c echo.Context) error {
	cookie, err := c.Cookie("oauthcookie")
	if err != nil {
		return c.JSON(http.StatusBadRequest, "no cookie")
	}
	if c.FormValue("state") != cookie.Value {
		log.Println("invalid google oauth state cookie : ", cookie.Value)
		return c.JSON(http.StatusUnauthorized, "invailed state")
	}
	data, err := getGoogleUserInfo(c.FormValue("code"))
	if err != nil {
		log.Println(err.Error())
		c.Redirect(http.StatusUnauthorized, "/")
	}
	info := new(AutoGenerated)
	json.Unmarshal([]byte(data), &info)
	EmailID := strings.Split(info.Email, "@")
	ACToken, err := module.CreateAccToken(EmailID[0])
	if err != nil {
		log.Println("failed create AC token")
	}
	RFtoken, err := module.CreateRefreshToken(EmailID[0])
	if err != nil {
		log.Println("failed create RF token")
	}
	accessCookie := module.CreateAccCookie(EmailID[0], ACToken)
	c.SetCookie(accessCookie)
	refreshCookie := module.CreateRefreCookie(EmailID[0], RFtoken)
	c.SetCookie(refreshCookie)
	refresh := new(module.Refresh)
	db := db.Connect()
	id := db.Find(&refresh, "id=?", EmailID[0])
	if id.RowsAffected != 0 {
		//db.Model(&refresh).Where("id =?", EmailID[0]).Update("reftoken", RFtoken)
		db.Raw("UPDATE refreshes SET reftoken = ? WHERE id = ?", RFtoken, EmailID[0])
	} else {
		refresh.Id = EmailID[0]
		refresh.Reftoken = RFtoken
		db.Create(&refresh)
	}

	return c.JSON(http.StatusOK, map[string]string{
		"split Email": EmailID[0],
		"RF Token":    RFtoken,
	})

}

const oauthGoogleUrlAPI = "https://www.googleapis.com/oauth2/v2/userinfo?access_token="

func getGoogleUserInfo(code string) ([]byte, error) {
	token, err := googleOauthConfig.Exchange(context.Background(), code)
	if err != nil {
		return nil, fmt.Errorf("failed to exchange %s\n", err.Error())
	}
	res, err := http.Get(oauthGoogleUrlAPI + token.AccessToken)
	if err != nil {
		return nil, fmt.Errorf("failed to get user info %s\n", err.Error())
	}
	return io.ReadAll(res.Body)
}
